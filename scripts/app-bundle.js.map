{"version":3,"sources":["app.js","environment.js","globals.js","main.js","format/format-currency.js","format/format-cust.js","format/format-date.js","format/format-number.js","resources/index.js","views/formatters.js","views/string-formatting.js","views/throttle.js"],"names":["App","config","title","debug","testing","Configuration","gDelay","gDelay2","gCurrency","gCurrencyFormat","gDateFormat","configure","Promise","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","CurrencyFormatValueConverter","toView","value","format","currency","htmlEncode","html","document","createElement","appendChild","createTextNode","parentNode","innerHTML","PreserveBreaksCustomAttribute","Element","element","valueChanged","replace","ConvertTicksValueConverter","DateFormatValueConverter","NumberFormatValueConverter","RoundDownValueConverter","number","decimals","Math","floor","pow","Formatters","currentDate","Date","myCurrencyValue","StringFormatting","message","Throttle","throttle_title","throttle_inp","debounce_title","debounce_inp","myDataDelay","myDataDelay2"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {inject} from 'aurelia-framework';\nimport {computedFrom} from 'aurelia-framework';\nimport {Configuration} from './globals';\n//import {bootstrap} from 'bootstrap';\n\n@inject(Configuration)\nexport class App {\n  constructor(config) {        \n    this.title = 'Aurelia - Binding Behavior';\n\n    \n\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","/* globals.js */\r\n/*\r\nput all global variables here, as camel-case prefixed with a small 'g'\r\n*/\r\n\r\nexport class Configuration {  \r\n  constructor(){\r\n      this.gDelay = 2000;\r\n      this.gDelay2 = 1100;\r\n      this.gCurrency = 'Â£';\r\n      this.gCurrencyFormat = '(0,0.00)';\r\n      this.gDateFormat = 'MMMM Mo YYYY';\r\n  }\r\n}","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}","import numeral from 'numeral';\r\nimport {inject} from 'aurelia-framework';\r\nimport {Configuration} from '../globals'; \r\n\r\n@inject(Configuration)\r\nexport class CurrencyFormatValueConverter {\r\n    constructor(config) {\r\n        this.gCurrencyFormat = config.gCurrencyFormat;\r\n        this.gCurrency = config.gCurrency;\r\n    }\r\n    toView(value, format = format ? format : this.gCurrencyFormat, currency = currency ? currency : this.gCurrency) {\r\n        return currency + numeral(value).format(format);\r\n    }\r\n}","import {inject} from 'aurelia-framework';\r\n\r\nfunction htmlEncode(html) {\r\n  return document.createElement('a').appendChild( \r\n    document.createTextNode(html)).parentNode.innerHTML;\r\n}\r\n\r\n@inject(Element)\r\nexport class PreserveBreaksCustomAttribute {\r\n  constructor(element) {\r\n    this.element = element;\r\n  }\r\n\r\n  valueChanged() {\r\n    let html = htmlEncode(this.value);\r\n    html = html.replace(/\\r/g, '').replace(/\\n/g, '<br/>');\r\n    this.element.innerHTML = html;\r\n  }\r\n}\r\n\r\nimport numeral from 'numeral';\r\n\r\nexport class ConvertTicksValueConverter {\r\n  toView(value) {\r\n    return numeral(value / 1000).format('0[.][0]');//2500 becomes 2.5, 2000 becomes 2\r\n  }\r\n}","import moment from 'moment';\r\nimport {inject} from 'aurelia-framework';\r\nimport {Configuration} from '../globals'; \r\n\r\n@inject(Configuration)\r\nexport class DateFormatValueConverter {\r\n    constructor(config) {\r\n        this.gDateFormat = config.gDateFormat;\r\n    }\r\n   toView(value, format) {\r\n      return moment(value).format(format ? format : this.gDateFormat);\r\n   }\r\n}","import numeral from 'numeral';\r\n\r\nexport class NumberFormatValueConverter {\r\n  toView(value, format) {\r\n    return numeral(value).format(format ? format : '');\r\n  }\r\n}\r\n\r\nexport class RoundDownValueConverter {\r\n  toView(number, decimals) {\r\n    decimals = decimals || 0;\r\n    return ( Math.floor( number * Math.pow(10, decimals) ) / Math.pow(10, decimals) );\r\n  }\r\n}","export function configure(config) {\n  //config.globalResources([]);\n}\n","import { inject } from 'aurelia-framework';\r\nimport { Configuration } from '../globals';\r\n\r\n@inject(Configuration)\r\nexport class Formatters {\r\n    constructor(config) {\r\n        this.currentDate = new Date();\r\n\r\n        this.myCurrencyValue = 999.99;//Math.random() * 1000\r\n    }\r\n}","import {inject} from 'aurelia-framework';\r\nimport {Configuration} from '../globals';\r\n//import {bootstrap} from 'bootstrap';\r\n\r\n@inject(Configuration)\r\nexport class StringFormatting {\r\n    constructor(config) {        \r\n\r\n    this.message = `this is my text\r\nit has some line breaks\r\nand some <script>evil javascript</script>\r\nthe line breaks were replaced with <br/> tags`;\r\n  }\r\n}","import {inject} from 'aurelia-framework';\r\nimport {Configuration} from '../globals';\r\n\r\n@inject(Configuration)\r\nexport class Throttle {\r\n    constructor(config) {        \r\n\r\n    this.throttle_title = 'throttle';\r\n    this.throttle_inp = 'Test Throttle';\r\n\r\n    this.debounce_title = 'debounce';   \r\n    this.debounce_inp = 'Test Debounce';\r\n\r\n    // global variables\r\n    this.myDataDelay = config.gDelay;\r\n    this.myDataDelay2 = config.gDelay2;\r\n  }\r\n}"],"sourceRoot":"../src"}